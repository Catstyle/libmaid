// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maid/session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maid/session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* SessionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionProto_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* SessionMiddleware_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_maid_2fsession_2eproto() {
  protobuf_AddDesc_maid_2fsession_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maid/session.proto");
  GOOGLE_CHECK(file != NULL);
  SessionProto_descriptor_ = file->message_type(0);
  static const int SessionProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, expired_time_),
  };
  SessionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionProto_descriptor_,
      SessionProto::default_instance_,
      SessionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionProto));
  SessionMiddleware_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maid_2fsession_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionProto_descriptor_, &SessionProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maid_2fsession_2eproto() {
  delete SessionProto::default_instance_;
  delete SessionProto_reflection_;
}

void protobuf_AddDesc_maid_2fsession_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::maid::proto::protobuf_AddDesc_maid_2fcontroller_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022maid/session.proto\022\nmaid.proto\032\025maid/c"
    "ontroller.proto\";\n\014SessionProto\022\n\n\002id\030\001 "
    "\001(\t\022\024\n\014expired_time\030\002 \001(\004*\t\010\350\007\020\200\200\200\200\0022\230\001\n"
    "\021SessionMiddleware\022@\n\nPreRequest\022\030.maid."
    "proto.SessionProto\032\030.maid.proto.SessionP"
    "roto\022A\n\013PostRequest\022\030.maid.proto.Session"
    "Proto\032\030.maid.proto.SessionProto:G\n\007sessi"
    "on\022\033.maid.proto.ControllerProto\030\352\007 \001(\0132\030"
    ".maid.proto.SessionProtoB\003\200\001\001", 349);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maid/session.proto", &protobuf_RegisterTypes);
  SessionProto::default_instance_ = new SessionProto();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::maid::proto::ControllerProto::default_instance(),
    1002, 11, false, false,
    &::maid::proto::SessionProto::default_instance());
  SessionProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maid_2fsession_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maid_2fsession_2eproto {
  StaticDescriptorInitializer_maid_2fsession_2eproto() {
    protobuf_AddDesc_maid_2fsession_2eproto();
  }
} static_descriptor_initializer_maid_2fsession_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SessionProto::kIdFieldNumber;
const int SessionProto::kExpiredTimeFieldNumber;
#endif  // !_MSC_VER

SessionProto::SessionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:maid.proto.SessionProto)
}

void SessionProto::InitAsDefaultInstance() {
}

SessionProto::SessionProto(const SessionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:maid.proto.SessionProto)
}

void SessionProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expired_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionProto::~SessionProto() {
  // @@protoc_insertion_point(destructor:maid.proto.SessionProto)
  SharedDtor();
}

void SessionProto::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SessionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionProto_descriptor_;
}

const SessionProto& SessionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maid_2fsession_2eproto();
  return *default_instance_;
}

SessionProto* SessionProto::default_instance_ = NULL;

SessionProto* SessionProto::New() const {
  return new SessionProto;
}

void SessionProto::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    expired_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:maid.proto.SessionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expired_time;
        break;
      }

      // optional uint64 expired_time = 2;
      case 2: {
        if (tag == 16) {
         parse_expired_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expired_time_)));
          set_has_expired_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:maid.proto.SessionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:maid.proto.SessionProto)
  return false;
#undef DO_
}

void SessionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:maid.proto.SessionProto)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional uint64 expired_time = 2;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->expired_time(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:maid.proto.SessionProto)
}

::google::protobuf::uint8* SessionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:maid.proto.SessionProto)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint64 expired_time = 2;
  if (has_expired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->expired_time(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maid.proto.SessionProto)
  return target;
}

int SessionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint64 expired_time = 2;
    if (has_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expired_time());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionProto::MergeFrom(const SessionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_expired_time()) {
      set_expired_time(from.expired_time());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionProto::CopyFrom(const SessionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionProto::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void SessionProto::Swap(SessionProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(expired_time_, other->expired_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata SessionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionProto_descriptor_;
  metadata.reflection = SessionProto_reflection_;
  return metadata;
}


// ===================================================================

SessionMiddleware::~SessionMiddleware() {}

const ::google::protobuf::ServiceDescriptor* SessionMiddleware::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionMiddleware_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SessionMiddleware::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionMiddleware_descriptor_;
}

void SessionMiddleware::PreRequest(::google::protobuf::RpcController* controller,
                         const ::maid::proto::SessionProto*,
                         ::maid::proto::SessionProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PreRequest() not implemented.");
  done->Run();
}

void SessionMiddleware::PostRequest(::google::protobuf::RpcController* controller,
                         const ::maid::proto::SessionProto*,
                         ::maid::proto::SessionProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PostRequest() not implemented.");
  done->Run();
}

void SessionMiddleware::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SessionMiddleware_descriptor_);
  switch(method->index()) {
    case 0:
      PreRequest(controller,
             ::google::protobuf::down_cast<const ::maid::proto::SessionProto*>(request),
             ::google::protobuf::down_cast< ::maid::proto::SessionProto*>(response),
             done);
      break;
    case 1:
      PostRequest(controller,
             ::google::protobuf::down_cast<const ::maid::proto::SessionProto*>(request),
             ::google::protobuf::down_cast< ::maid::proto::SessionProto*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SessionMiddleware::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::maid::proto::SessionProto::default_instance();
    case 1:
      return ::maid::proto::SessionProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SessionMiddleware::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::maid::proto::SessionProto::default_instance();
    case 1:
      return ::maid::proto::SessionProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SessionMiddleware_Stub::SessionMiddleware_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SessionMiddleware_Stub::SessionMiddleware_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SessionMiddleware_Stub::~SessionMiddleware_Stub() {
  if (owns_channel_) delete channel_;
}

void SessionMiddleware_Stub::PreRequest(::google::protobuf::RpcController* controller,
                              const ::maid::proto::SessionProto* request,
                              ::maid::proto::SessionProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SessionMiddleware_Stub::PostRequest(::google::protobuf::RpcController* controller,
                              const ::maid::proto::SessionProto* request,
                              ::maid::proto::SessionProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
::google::protobuf::internal::ExtensionIdentifier< ::maid::proto::ControllerProto,
    ::google::protobuf::internal::MessageTypeTraits< ::maid::proto::SessionProto >, 11, false >
  session(kSessionFieldNumber, ::maid::proto::SessionProto::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

// @@protoc_insertion_point(global_scope)
