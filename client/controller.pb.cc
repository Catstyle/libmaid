// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "controller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maid {
namespace controller {

namespace {

const ::google::protobuf::Descriptor* Controller_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Controller_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_controller_2eproto() {
  protobuf_AddDesc_controller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "controller.proto");
  GOOGLE_CHECK(file != NULL);
  Controller_descriptor_ = file->message_type(0);
  static const int Controller_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Controller, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Controller, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Controller, transmit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Controller, stub_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Controller, is_canceled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Controller, failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Controller, error_text_),
  };
  Controller_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Controller_descriptor_,
      Controller::default_instance_,
      Controller_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Controller, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Controller, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Controller));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_controller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Controller_descriptor_, &Controller::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_controller_2eproto() {
  delete Controller::default_instance_;
  delete Controller_reflection_;
}

void protobuf_AddDesc_controller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020controller.proto\022\017maid.controller\"\230\001\n\n"
    "Controller\022\024\n\014service_name\030\001 \001(\t\022\023\n\013meth"
    "od_name\030\002 \001(\t\022\023\n\013transmit_id\030\003 \001(\005\022\021\n\tst"
    "ub_side\030\004 \001(\010\022\023\n\013is_canceled\030\005 \001(\010\022\016\n\006fa"
    "iled\030\006 \001(\010\022\022\n\nerror_text\030\007 \001(\t", 190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "controller.proto", &protobuf_RegisterTypes);
  Controller::default_instance_ = new Controller();
  Controller::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_controller_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_controller_2eproto {
  StaticDescriptorInitializer_controller_2eproto() {
    protobuf_AddDesc_controller_2eproto();
  }
} static_descriptor_initializer_controller_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Controller::kServiceNameFieldNumber;
const int Controller::kMethodNameFieldNumber;
const int Controller::kTransmitIdFieldNumber;
const int Controller::kStubSideFieldNumber;
const int Controller::kIsCanceledFieldNumber;
const int Controller::kFailedFieldNumber;
const int Controller::kErrorTextFieldNumber;
#endif  // !_MSC_VER

Controller::Controller()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Controller::InitAsDefaultInstance() {
}

Controller::Controller(const Controller& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Controller::SharedCtor() {
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transmit_id_ = 0;
  stub_side_ = false;
  is_canceled_ = false;
  failed_ = false;
  error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Controller::~Controller() {
  SharedDtor();
}

void Controller::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    delete error_text_;
  }
  if (this != default_instance_) {
  }
}

void Controller::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Controller::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Controller_descriptor_;
}

const Controller& Controller::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();  return *default_instance_;
}

Controller* Controller::default_instance_ = NULL;

Controller* Controller::New() const {
  return new Controller;
}

void Controller::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    transmit_id_ = 0;
    stub_side_ = false;
    is_canceled_ = false;
    failed_ = false;
    if (has_error_text()) {
      if (error_text_ != &::google::protobuf::internal::kEmptyString) {
        error_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Controller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_method_name;
        break;
      }
      
      // optional string method_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_transmit_id;
        break;
      }
      
      // optional int32 transmit_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transmit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmit_id_)));
          set_has_transmit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stub_side;
        break;
      }
      
      // optional bool stub_side = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stub_side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stub_side_)));
          set_has_stub_side();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_canceled;
        break;
      }
      
      // optional bool is_canceled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_canceled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_canceled_)));
          set_has_is_canceled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_failed;
        break;
      }
      
      // optional bool failed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failed_)));
          set_has_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_error_text;
        break;
      }
      
      // optional string error_text = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Controller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_name(), output);
  }
  
  // optional string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->method_name(), output);
  }
  
  // optional int32 transmit_id = 3;
  if (has_transmit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->transmit_id(), output);
  }
  
  // optional bool stub_side = 4;
  if (has_stub_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->stub_side(), output);
  }
  
  // optional bool is_canceled = 5;
  if (has_is_canceled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_canceled(), output);
  }
  
  // optional bool failed = 6;
  if (has_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->failed(), output);
  }
  
  // optional string error_text = 7;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->error_text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Controller::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }
  
  // optional string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }
  
  // optional int32 transmit_id = 3;
  if (has_transmit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->transmit_id(), target);
  }
  
  // optional bool stub_side = 4;
  if (has_stub_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->stub_side(), target);
  }
  
  // optional bool is_canceled = 5;
  if (has_is_canceled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_canceled(), target);
  }
  
  // optional bool failed = 6;
  if (has_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->failed(), target);
  }
  
  // optional string error_text = 7;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->error_text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Controller::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // optional string method_name = 2;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }
    
    // optional int32 transmit_id = 3;
    if (has_transmit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmit_id());
    }
    
    // optional bool stub_side = 4;
    if (has_stub_side()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_canceled = 5;
    if (has_is_canceled()) {
      total_size += 1 + 1;
    }
    
    // optional bool failed = 6;
    if (has_failed()) {
      total_size += 1 + 1;
    }
    
    // optional string error_text = 7;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Controller::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Controller* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Controller*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Controller::MergeFrom(const Controller& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_transmit_id()) {
      set_transmit_id(from.transmit_id());
    }
    if (from.has_stub_side()) {
      set_stub_side(from.stub_side());
    }
    if (from.has_is_canceled()) {
      set_is_canceled(from.is_canceled());
    }
    if (from.has_failed()) {
      set_failed(from.failed());
    }
    if (from.has_error_text()) {
      set_error_text(from.error_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Controller::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Controller::CopyFrom(const Controller& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Controller::IsInitialized() const {
  
  return true;
}

void Controller::Swap(Controller* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(method_name_, other->method_name_);
    std::swap(transmit_id_, other->transmit_id_);
    std::swap(stub_side_, other->stub_side_);
    std::swap(is_canceled_, other->is_canceled_);
    std::swap(failed_, other->failed_);
    std::swap(error_text_, other->error_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Controller::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Controller_descriptor_;
  metadata.reflection = Controller_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace controller
}  // namespace maid

// @@protoc_insertion_point(global_scope)
