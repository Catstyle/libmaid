// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#ifndef PROTOBUF_controller_2eproto__INCLUDED
#define PROTOBUF_controller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_controller_2eproto();
void protobuf_AssignDesc_controller_2eproto();
void protobuf_ShutdownFile_controller_2eproto();

class ControllerMeta;

// ===================================================================

class ControllerMeta : public ::google::protobuf::Message {
 public:
  ControllerMeta();
  virtual ~ControllerMeta();
  
  ControllerMeta(const ControllerMeta& from);
  
  inline ControllerMeta& operator=(const ControllerMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerMeta& default_instance();
  
  void Swap(ControllerMeta* other);
  
  // implements Message ----------------------------------------------
  
  ControllerMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerMeta& from);
  void MergeFrom(const ControllerMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional string method_name = 2;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  
  // optional uint32 transmit_id = 3;
  inline bool has_transmit_id() const;
  inline void clear_transmit_id();
  static const int kTransmitIdFieldNumber = 3;
  inline ::google::protobuf::uint32 transmit_id() const;
  inline void set_transmit_id(::google::protobuf::uint32 value);
  
  // optional bool stub = 4;
  inline bool has_stub() const;
  inline void clear_stub();
  static const int kStubFieldNumber = 4;
  inline bool stub() const;
  inline void set_stub(bool value);
  
  // optional bool is_canceled = 5;
  inline bool has_is_canceled() const;
  inline void clear_is_canceled();
  static const int kIsCanceledFieldNumber = 5;
  inline bool is_canceled() const;
  inline void set_is_canceled(bool value);
  
  // optional bool failed = 6;
  inline bool has_failed() const;
  inline void clear_failed();
  static const int kFailedFieldNumber = 6;
  inline bool failed() const;
  inline void set_failed(bool value);
  
  // optional string error_text = 7;
  inline bool has_error_text() const;
  inline void clear_error_text();
  static const int kErrorTextFieldNumber = 7;
  inline const ::std::string& error_text() const;
  inline void set_error_text(const ::std::string& value);
  inline void set_error_text(const char* value);
  inline void set_error_text(const char* value, size_t size);
  inline ::std::string* mutable_error_text();
  inline ::std::string* release_error_text();
  
  // optional bool wide = 8;
  inline bool has_wide() const;
  inline void clear_wide();
  static const int kWideFieldNumber = 8;
  inline bool wide() const;
  inline void set_wide(bool value);
  
  // optional int32 depth = 9;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 9;
  inline ::google::protobuf::int32 depth() const;
  inline void set_depth(::google::protobuf::int32 value);
  
  // optional int32 fd = 10;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 10;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:maid.proto.ControllerMeta)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_method_name();
  inline void clear_has_method_name();
  inline void set_has_transmit_id();
  inline void clear_has_transmit_id();
  inline void set_has_stub();
  inline void clear_has_stub();
  inline void set_has_is_canceled();
  inline void clear_has_is_canceled();
  inline void set_has_failed();
  inline void clear_has_failed();
  inline void set_has_error_text();
  inline void clear_has_error_text();
  inline void set_has_wide();
  inline void clear_has_wide();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_fd();
  inline void clear_has_fd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::std::string* method_name_;
  ::google::protobuf::uint32 transmit_id_;
  bool stub_;
  bool is_canceled_;
  bool failed_;
  bool wide_;
  ::std::string* error_text_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 fd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();
  
  void InitAsDefaultInstance();
  static ControllerMeta* default_instance_;
};
// ===================================================================


// ===================================================================

// ControllerMeta

// optional string service_name = 1;
inline bool ControllerMeta::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllerMeta::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControllerMeta::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControllerMeta::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& ControllerMeta::service_name() const {
  return *service_name_;
}
inline void ControllerMeta::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void ControllerMeta::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void ControllerMeta::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControllerMeta::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* ControllerMeta::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string method_name = 2;
inline bool ControllerMeta::has_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControllerMeta::set_has_method_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControllerMeta::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControllerMeta::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& ControllerMeta::method_name() const {
  return *method_name_;
}
inline void ControllerMeta::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void ControllerMeta::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void ControllerMeta::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControllerMeta::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}
inline ::std::string* ControllerMeta::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 transmit_id = 3;
inline bool ControllerMeta::has_transmit_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControllerMeta::set_has_transmit_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControllerMeta::clear_has_transmit_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControllerMeta::clear_transmit_id() {
  transmit_id_ = 0u;
  clear_has_transmit_id();
}
inline ::google::protobuf::uint32 ControllerMeta::transmit_id() const {
  return transmit_id_;
}
inline void ControllerMeta::set_transmit_id(::google::protobuf::uint32 value) {
  set_has_transmit_id();
  transmit_id_ = value;
}

// optional bool stub = 4;
inline bool ControllerMeta::has_stub() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ControllerMeta::set_has_stub() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ControllerMeta::clear_has_stub() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ControllerMeta::clear_stub() {
  stub_ = false;
  clear_has_stub();
}
inline bool ControllerMeta::stub() const {
  return stub_;
}
inline void ControllerMeta::set_stub(bool value) {
  set_has_stub();
  stub_ = value;
}

// optional bool is_canceled = 5;
inline bool ControllerMeta::has_is_canceled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ControllerMeta::set_has_is_canceled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ControllerMeta::clear_has_is_canceled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ControllerMeta::clear_is_canceled() {
  is_canceled_ = false;
  clear_has_is_canceled();
}
inline bool ControllerMeta::is_canceled() const {
  return is_canceled_;
}
inline void ControllerMeta::set_is_canceled(bool value) {
  set_has_is_canceled();
  is_canceled_ = value;
}

// optional bool failed = 6;
inline bool ControllerMeta::has_failed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ControllerMeta::set_has_failed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ControllerMeta::clear_has_failed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ControllerMeta::clear_failed() {
  failed_ = false;
  clear_has_failed();
}
inline bool ControllerMeta::failed() const {
  return failed_;
}
inline void ControllerMeta::set_failed(bool value) {
  set_has_failed();
  failed_ = value;
}

// optional string error_text = 7;
inline bool ControllerMeta::has_error_text() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ControllerMeta::set_has_error_text() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ControllerMeta::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ControllerMeta::clear_error_text() {
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    error_text_->clear();
  }
  clear_has_error_text();
}
inline const ::std::string& ControllerMeta::error_text() const {
  return *error_text_;
}
inline void ControllerMeta::set_error_text(const ::std::string& value) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void ControllerMeta::set_error_text(const char* value) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void ControllerMeta::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControllerMeta::mutable_error_text() {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  return error_text_;
}
inline ::std::string* ControllerMeta::release_error_text() {
  clear_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_text_;
    error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool wide = 8;
inline bool ControllerMeta::has_wide() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ControllerMeta::set_has_wide() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ControllerMeta::clear_has_wide() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ControllerMeta::clear_wide() {
  wide_ = false;
  clear_has_wide();
}
inline bool ControllerMeta::wide() const {
  return wide_;
}
inline void ControllerMeta::set_wide(bool value) {
  set_has_wide();
  wide_ = value;
}

// optional int32 depth = 9;
inline bool ControllerMeta::has_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ControllerMeta::set_has_depth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ControllerMeta::clear_has_depth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ControllerMeta::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 ControllerMeta::depth() const {
  return depth_;
}
inline void ControllerMeta::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
}

// optional int32 fd = 10;
inline bool ControllerMeta::has_fd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ControllerMeta::set_has_fd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ControllerMeta::clear_has_fd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ControllerMeta::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
inline ::google::protobuf::int32 ControllerMeta::fd() const {
  return fd_;
}
inline void ControllerMeta::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_controller_2eproto__INCLUDED
