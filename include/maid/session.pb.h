// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maid/session.proto

#ifndef PROTOBUF_maid_2fsession_2eproto__INCLUDED
#define PROTOBUF_maid_2fsession_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "maid/controller.pb.h"
// @@protoc_insertion_point(includes)

namespace maid {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maid_2fsession_2eproto();
void protobuf_AssignDesc_maid_2fsession_2eproto();
void protobuf_ShutdownFile_maid_2fsession_2eproto();

class SessionProto;

// ===================================================================

class SessionProto : public ::google::protobuf::Message {
 public:
  SessionProto();
  virtual ~SessionProto();

  SessionProto(const SessionProto& from);

  inline SessionProto& operator=(const SessionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionProto& default_instance();

  void Swap(SessionProto* other);

  // implements Message ----------------------------------------------

  SessionProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionProto& from);
  void MergeFrom(const SessionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional uint64 expired_time = 2;
  inline bool has_expired_time() const;
  inline void clear_expired_time();
  static const int kExpiredTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 expired_time() const;
  inline void set_expired_time(::google::protobuf::uint64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SessionProto)
  // @@protoc_insertion_point(class_scope:maid.proto.SessionProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_expired_time();
  inline void clear_has_expired_time();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::uint64 expired_time_;
  friend void  protobuf_AddDesc_maid_2fsession_2eproto();
  friend void protobuf_AssignDesc_maid_2fsession_2eproto();
  friend void protobuf_ShutdownFile_maid_2fsession_2eproto();

  void InitAsDefaultInstance();
  static SessionProto* default_instance_;
};
// ===================================================================

class SessionMiddleware_Stub;

class SessionMiddleware : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SessionMiddleware() {};
 public:
  virtual ~SessionMiddleware();

  typedef SessionMiddleware_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void PreRequest(::google::protobuf::RpcController* controller,
                       const ::maid::proto::SessionProto* request,
                       ::maid::proto::SessionProto* response,
                       ::google::protobuf::Closure* done);
  virtual void PostRequest(::google::protobuf::RpcController* controller,
                       const ::maid::proto::SessionProto* request,
                       ::maid::proto::SessionProto* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SessionMiddleware);
};

class SessionMiddleware_Stub : public SessionMiddleware {
 public:
  SessionMiddleware_Stub(::google::protobuf::RpcChannel* channel);
  SessionMiddleware_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~SessionMiddleware_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements SessionMiddleware ------------------------------------------

  void PreRequest(::google::protobuf::RpcController* controller,
                       const ::maid::proto::SessionProto* request,
                       ::maid::proto::SessionProto* response,
                       ::google::protobuf::Closure* done);
  void PostRequest(::google::protobuf::RpcController* controller,
                       const ::maid::proto::SessionProto* request,
                       ::maid::proto::SessionProto* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SessionMiddleware_Stub);
};


// ===================================================================

static const int kSessionFieldNumber = 1002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::maid::proto::ControllerProto,
    ::google::protobuf::internal::MessageTypeTraits< ::maid::proto::SessionProto >, 11, false >
  session;

// ===================================================================

// SessionProto

// optional string id = 1;
inline bool SessionProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionProto::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SessionProto::id() const {
  // @@protoc_insertion_point(field_get:maid.proto.SessionProto.id)
  return *id_;
}
inline void SessionProto::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:maid.proto.SessionProto.id)
}
inline void SessionProto::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:maid.proto.SessionProto.id)
}
inline void SessionProto::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maid.proto.SessionProto.id)
}
inline ::std::string* SessionProto::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maid.proto.SessionProto.id)
  return id_;
}
inline ::std::string* SessionProto::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionProto::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maid.proto.SessionProto.id)
}

// optional uint64 expired_time = 2;
inline bool SessionProto::has_expired_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionProto::set_has_expired_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionProto::clear_has_expired_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionProto::clear_expired_time() {
  expired_time_ = GOOGLE_ULONGLONG(0);
  clear_has_expired_time();
}
inline ::google::protobuf::uint64 SessionProto::expired_time() const {
  // @@protoc_insertion_point(field_get:maid.proto.SessionProto.expired_time)
  return expired_time_;
}
inline void SessionProto::set_expired_time(::google::protobuf::uint64 value) {
  set_has_expired_time();
  expired_time_ = value;
  // @@protoc_insertion_point(field_set:maid.proto.SessionProto.expired_time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace maid

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_maid_2fsession_2eproto__INCLUDED
