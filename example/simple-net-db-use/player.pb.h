// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_player_2eproto__INCLUDED
#define PROTOBUF_player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_player_2eproto();
void protobuf_AssignDesc_player_2eproto();
void protobuf_ShutdownFile_player_2eproto();

class PlayerModel;

// ===================================================================

class PlayerModel : public ::google::protobuf::Message {
 public:
  PlayerModel();
  virtual ~PlayerModel();
  
  PlayerModel(const PlayerModel& from);
  
  inline PlayerModel& operator=(const PlayerModel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerModel& default_instance();
  
  void Swap(PlayerModel* other);
  
  // implements Message ----------------------------------------------
  
  PlayerModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerModel& from);
  void MergeFrom(const PlayerModel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  
  // optional int32 gold = 4;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);
  
  // optional int32 last_login_time = 5;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 5;
  inline ::google::protobuf::int32 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PlayerModel)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 gold_;
  ::std::string* sex_;
  ::google::protobuf::int32 last_login_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_player_2eproto();
  friend void protobuf_AssignDesc_player_2eproto();
  friend void protobuf_ShutdownFile_player_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerModel* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerModel

// optional int32 id = 1;
inline bool PlayerModel::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerModel::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerModel::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerModel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlayerModel::id() const {
  return id_;
}
inline void PlayerModel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PlayerModel::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerModel::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerModel::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerModel::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerModel::name() const {
  return *name_;
}
inline void PlayerModel::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerModel::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerModel::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerModel::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerModel::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sex = 3;
inline bool PlayerModel::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerModel::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerModel::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerModel::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& PlayerModel::sex() const {
  return *sex_;
}
inline void PlayerModel::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void PlayerModel::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void PlayerModel::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerModel::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* PlayerModel::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 gold = 4;
inline bool PlayerModel::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerModel::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerModel::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerModel::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 PlayerModel::gold() const {
  return gold_;
}
inline void PlayerModel::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 last_login_time = 5;
inline bool PlayerModel::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerModel::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerModel::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerModel::clear_last_login_time() {
  last_login_time_ = 0;
  clear_has_last_login_time();
}
inline ::google::protobuf::int32 PlayerModel::last_login_time() const {
  return last_login_time_;
}
inline void PlayerModel::set_last_login_time(::google::protobuf::int32 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_2eproto__INCLUDED
